{"ast":null,"code":"var _jsxFileName = \"/home/andres/Desktop/www/ticketsapp/src/features/login/Login.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Form, Button, Message, Grid, Header, Segment } from \"semantic-ui-react\";\nimport { login, loginGoogle } from \"../../services/redux/actions/authActions\";\nimport withSemanticUIFormik from \"../../components/hoc/FormikSUI\";\nimport * as Yup from \"yup\";\nimport { Redirect } from \"react-router-dom\";\nimport Google from \"./social/Google\";\n\nvar MyInnerForm = function MyInnerForm(props) {\n  var errors = props.errors,\n      isSubmitting = props.isSubmitting,\n      handleChange = props.handleChange,\n      handleSubmit = props.handleSubmit,\n      userHasLoggedin = props.userHasLoggedin,\n      loginHasFailed = props.loginHasFailed,\n      loginGoogleRequest = props.loginGoogleRequest;\n\n  if (userHasLoggedin) {\n    return React.createElement(Redirect, {\n      to: {\n        pathname: \"/dashboard/budgets\",\n        state: {\n          from: props.location\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    });\n  } else {\n    return React.createElement(Grid, {\n      style: {\n        height: \"100%\"\n      },\n      verticalAlign: \"middle\",\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 6,\n      style: {\n        paddingTop: \"2em\",\n        maxWidth: 450\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h2\",\n      color: \"black\",\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Ingresa con tu cuenta\"), React.createElement(Segment, {\n      stacked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, console.log(errors), Object.keys(errors).length > 0 ? React.createElement(Message, {\n      error: true,\n      header: \"Campos invalidos\",\n      list: Object.keys(errors).map(function (key) {\n        return errors[key];\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }) : loginHasFailed ? React.createElement(Message, {\n      error: true,\n      header: \"Hay problemas con el inicio de sesion\",\n      content: \"err\" in loginHasFailed ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, loginHasFailed.err.message) : \"errors\" in loginHasFailed ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, JSON.stringify(loginHasFailed, null, 4)) : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }) : null, React.createElement(Form, {\n      size: \"large\",\n      onSubmit: handleSubmit,\n      loading: isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Form.Input, {\n      label: \"Email electr\\xF3nico\",\n      labelPosition: \"left\",\n      fluid: true,\n      icon: \"user\",\n      type: \"email\",\n      name: \"email\",\n      iconPosition: \"left\",\n      placeholder: \"Email electr\\xF3nico...\",\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      label: \"Contrase\\xF1a\",\n      labelPosition: \"left\",\n      type: \"password\",\n      fluid: true,\n      icon: \"lock\",\n      iconPosition: \"left\",\n      name: \"password\",\n      placeholder: \"Contrase\\xF1a...\",\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(Button, {\n      id: \"submit-login\",\n      type: \"submit\",\n      style: {\n        width: \"100%\",\n        height: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Iniciar Sesi\\xF3n\")), React.createElement(Header, {\n      as: \"h2\",\n      color: \"black\",\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"O CON\", \" \"), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Google, {\n      onLoginSuccess: loginGoogleRequest,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })))))));\n  }\n};\n\nvar mapState = function mapState(state) {\n  return {\n    userHasLoggedin: state.authService.loginSuccess,\n    loginHasFailed: state.authService.loginFailure\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    loginRequest: function loginRequest(user) {\n      dispatch(login(user));\n    },\n    loginGoogleRequest: function loginGoogleRequest(user) {\n      dispatch(loginGoogle(user));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(withSemanticUIFormik({\n  mapPropsToValues: function mapPropsToValues() {\n    return {\n      email: \"\",\n      password: \"\"\n    };\n  },\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email(\"Email invalido\").required(\"Email es requerido!\"),\n    password: Yup.string().required(\"Constrase√±a requerida!\")\n  }),\n  handleSubmit: function handleSubmit(values, _ref) {\n    var setSubmitting = _ref.setSubmitting,\n        props = _ref.props;\n    setTimeout(function () {\n      props.loginRequest(values);\n      setSubmitting(false);\n    }, 1000);\n  },\n  displayName: \"LoginForm\"\n})(MyInnerForm));","map":{"version":3,"sources":["/home/andres/Desktop/www/ticketsapp/src/features/login/Login.js"],"names":["React","connect","Form","Button","Message","Grid","Header","Segment","login","loginGoogle","withSemanticUIFormik","Yup","Redirect","Google","MyInnerForm","props","errors","isSubmitting","handleChange","handleSubmit","userHasLoggedin","loginHasFailed","loginGoogleRequest","pathname","state","from","location","height","paddingTop","maxWidth","console","log","Object","keys","length","map","key","err","message","JSON","stringify","width","mapState","authService","loginSuccess","loginFailure","mapDispatch","dispatch","loginRequest","user","mapPropsToValues","email","password","validationSchema","object","shape","string","required","values","setSubmitting","setTimeout","displayName"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Form,\n  Button,\n  Message,\n  Grid,\n  Header,\n  Segment\n} from \"semantic-ui-react\";\nimport { login, loginGoogle } from \"../../services/redux/actions/authActions\";\nimport withSemanticUIFormik from \"../../components/hoc/FormikSUI\";\nimport * as Yup from \"yup\";\nimport { Redirect } from \"react-router-dom\";\nimport Google from \"./social/Google\";\n\nconst MyInnerForm = props => {\n  const {\n    errors,\n    isSubmitting,\n    handleChange,\n    handleSubmit,\n    userHasLoggedin,\n    loginHasFailed,\n    loginGoogleRequest\n  } = props;\n\n  if (userHasLoggedin) {\n    return (\n      <Redirect\n        to={{\n          pathname: \"/dashboard/budgets\",\n          state: {\n            from: props.location\n          }\n        }}\n      />\n    );\n  } else {\n    return (\n      <Grid\n        style={{\n          height: \"100%\"\n        }}\n        verticalAlign=\"middle\"\n        centered\n      >\n        <Grid.Row centered>\n          <Grid.Column width={6} style={{ paddingTop: \"2em\", maxWidth: 450 }}>\n            <Header as=\"h2\" color=\"black\" textAlign=\"center\">\n              Ingresa con tu cuenta\n            </Header>\n            <Segment stacked>\n              {console.log(errors)}\n              {Object.keys(errors).length > 0 ? (\n                <Message\n                  error\n                  header=\"Campos invalidos\"\n                  list={Object.keys(errors).map(key => errors[key])}\n                />\n              ) : loginHasFailed ? (\n                <Message\n                  error\n                  header=\"Hay problemas con el inicio de sesion\"\n                  content={\n                    \"err\" in loginHasFailed ? (\n                      <p>{loginHasFailed.err.message}</p>\n                    ) : \"errors\" in loginHasFailed ? (\n                      <p>{JSON.stringify(loginHasFailed, null, 4)}</p>\n                    ) : null\n                  }\n                />\n              ) : null}\n              <Form size=\"large\" onSubmit={handleSubmit} loading={isSubmitting}>\n                <Form.Input\n                  label=\"Email electr√≥nico\"\n                  labelPosition=\"left\"\n                  fluid\n                  icon=\"user\"\n                  type=\"email\"\n                  name=\"email\"\n                  iconPosition=\"left\"\n                  placeholder=\"Email electr√≥nico...\"\n                  onChange={handleChange}\n                />\n                <Form.Input\n                  label=\"Contrase√±a\"\n                  labelPosition=\"left\"\n                  type=\"password\"\n                  fluid\n                  icon=\"lock\"\n                  iconPosition=\"left\"\n                  name=\"password\"\n                  placeholder=\"Contrase√±a...\"\n                  onChange={handleChange}\n                />\n                <Button\n                  id=\"submit-login\"\n                  type=\"submit\"\n                  style={{ width: \"100%\", height: \"auto\" }}\n                >\n                  Iniciar Sesi√≥n\n                </Button>\n              </Form>\n              <Header as=\"h2\" color=\"black\" textAlign=\"center\">\n                O CON{\" \"}\n              </Header>\n              <Grid.Row>\n                <Grid.Column width={3}>\n                  <Google onLoginSuccess={loginGoogleRequest} />\n                </Grid.Column>\n              </Grid.Row>\n            </Segment>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n};\n\nconst mapState = state => {\n  return {\n    userHasLoggedin: state.authService.loginSuccess,\n    loginHasFailed: state.authService.loginFailure\n  };\n};\n\nconst mapDispatch = dispatch => {\n  return {\n    loginRequest: user => {\n      dispatch(login(user));\n    },\n    loginGoogleRequest: user => {\n      dispatch(loginGoogle(user));\n    }\n  };\n};\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(\n  withSemanticUIFormik({\n    mapPropsToValues: () => ({ email: \"\", password: \"\" }),\n    validationSchema: Yup.object().shape({\n      email: Yup.string()\n        .email(\"Email invalido\")\n        .required(\"Email es requerido!\"),\n      password: Yup.string().required(\"Constrase√±a requerida!\")\n    }),\n    handleSubmit: (values, { setSubmitting, props }) => {\n      setTimeout(() => {\n        props.loginRequest(values);\n        setSubmitting(false);\n      }, 1000);\n    },\n    displayName: \"LoginForm\"\n  })(MyInnerForm)\n);\n"]},"metadata":{},"sourceType":"module"}