{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SettingsPage = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * @react-settings-pane\n *\n * @copyright Dennis StÃ¼cken\n * @licence MIT\n */\n\n\nvar SettingsPage = exports.SettingsPage = function (_Component) {\n  _inherits(SettingsPage, _Component);\n\n  function SettingsPage() {\n    _classCallCheck(this, SettingsPage);\n\n    return _possibleConstructorReturn(this, Object.getPrototypeOf(SettingsPage).apply(this, arguments));\n  }\n\n  _createClass(SettingsPage, [{\n    key: \"renderWithOptions\",\n\n    /**\n     * Render page with dynamic options object\n     *\n     * @returns {XML}\n     */\n    value: function renderWithOptions()\n    /*options*/\n    {\n      // todo: set onChange={this.props.onChange} to all form elements.\n      return _react2.default.createElement(\"div\", null, \"Render With Options (not implemented, yet)\");\n    }\n    /**\n     * Render with content (Childs of <SettingsPage />)\n     *\n     * @param content\n     * @returns {*}\n     */\n\n    /**\n     * PropTypes\n     *\n     * @type {{handler: *, options: (string|string|*|Type.object|string), settings: (string|string|*|Type.object|string), onChange: *, switchContent: *, onPaneLeave: *, onMenuItemClick: *}}\n     */\n\n  }, {\n    key: \"renderWithContent\",\n    value: function renderWithContent(content) {\n      return content;\n    }\n    /**\n     * Update form in a very dirty way..\n     *\n     * @todo find a better way or disable custom forms via children\n     */\n\n  }, {\n    key: \"updateForm\",\n    value: function updateForm() {\n      if (this.props.children) {\n        var settings = this.props.settings,\n            key = void 0,\n            elements = void 0;\n\n        for (key in settings) {\n          if (settings.hasOwnProperty(key)) {\n            elements = document.getElementsByName(key);\n\n            if (elements.length > 0 && elements[0]) {\n              elements[0].value = settings[key];\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateForm();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.updateForm();\n    }\n    /**\n     * Return content for this page\n     *\n     * @returns {*}\n     */\n\n  }, {\n    key: \"content\",\n    value: function content() {\n      if (this.props.options) {\n        return this.renderWithOptions(this.props.options);\n      } else if (this.props.children) {\n        return this.renderWithContent(this.props.children);\n      }\n    }\n    /**\n     * Render this component\n     *\n     * @returns {XML}\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        className: \"scroller settings-innerpage\"\n      }, this.content());\n    }\n  }]);\n\n  return SettingsPage;\n}(_react.Component);\n\nSettingsPage.propTypes = {\n  handler: _react.PropTypes.string.isRequired,\n  options: _react.PropTypes.object,\n  settings: _react.PropTypes.object,\n  onChange: _react.PropTypes.func,\n  switchContent: _react.PropTypes.func,\n  onPaneLeave: _react.PropTypes.func,\n  onMenuItemClick: _react.PropTypes.func\n};\nexports.default = SettingsPage;","map":null,"metadata":{},"sourceType":"script"}