{"ast":null,"code":"import axios from \"axios\";\nvar API_ROOT = \"/api\";\nvar server = axios.create({\n  baseURL: API_ROOT\n});\nvar token = null;\n\nvar tokenInterceptor = function tokenInterceptor(config) {\n  if (token) {\n    config.headers[\"token\"] = token;\n  }\n\n  return config;\n};\n\nvar responseBody = function responseBody(response) {\n  return response.data;\n};\n\nserver.interceptors.request.use(tokenInterceptor, function (error) {\n  return Promise.reject(error);\n});\nvar serverRequests = {\n  del: function del(url) {\n    return server.delete(\"\".concat(url)).then(responseBody);\n  },\n  get: function get(url) {\n    return server.get(\"\".concat(url)).then(responseBody);\n  },\n  put: function put(url, body) {\n    return server.put(\"\".concat(url), body).then(responseBody);\n  },\n  post: function post(url, body) {\n    return server.post(\"\".concat(url), body).then(responseBody);\n  }\n};\nvar Auth = {\n  login: function login(user) {\n    return serverRequests.post(\"/login\", user);\n  },\n  loginGoogle: function loginGoogle(user) {\n    return serverRequests.post(\"/login/google\", user);\n  },\n  register: function register(user) {\n    return serverRequests.post(\"/user\", user);\n  }\n};\nvar Account = {\n  getAll: function getAll() {\n    return serverRequests.get(\"/account\");\n  },\n  get: function get(account) {\n    return serverRequests.get(\"/account/\".concat(account));\n  }\n};\nvar Transaction = {\n  getAll: function getAll() {\n    return serverRequests.get(\"/transaction\");\n  },\n  delete: function _delete(id) {\n    return serverRequests.del(\"/transaction/\".concat(id));\n  },\n  get: function get(id) {\n    return serverRequests.get(\"/transaction/\".concat(id));\n  },\n  update: function update(transaction) {\n    return serverRequests.put(\"/transaction/\".concat(transaction.id), transaction);\n  },\n  create: function create(transaction) {\n    return serverRequests.post(\"/transaction\", transaction);\n  }\n};\nvar Budget = {\n  getAll: function getAll() {\n    return serverRequests.get(\"/budget\");\n  },\n  delete: function _delete(id) {\n    return serverRequests.del(\"/budget/\".concat(id));\n  },\n  get: function get(id) {\n    return serverRequests.get(\"/budget/\".concat(id));\n  },\n  update: function update(budget) {\n    return serverRequests.put(\"/budget/\".concat(budget._id), budget);\n  },\n  create: function create(budget) {\n    return serverRequests.post(\"/budget\", budget);\n  }\n};\nvar User = {\n  getAll: function getAll() {\n    return serverRequests.get(\"/user\");\n  },\n  get: function get(id) {\n    return serverRequests.get(\"/user/\".concat(id));\n  },\n  profile: function profile() {\n    return serverRequests.get(\"/profile\");\n  },\n  delete: function _delete(id) {\n    return serverRequests.del(\"/user/\".concat(id));\n  },\n  update: function update(user) {\n    return serverRequests.put(\"/user\", user);\n  }\n};\nexport default {\n  Auth: Auth,\n  User: User,\n  Budget: Budget,\n  Account: Account,\n  Transaction: Transaction,\n  setToken: function setToken(_token) {\n    token = _token;\n  }\n};","map":{"version":3,"sources":["/home/andres/Desktop/www/ticketsapp/src/services/api/index.js"],"names":["axios","API_ROOT","server","create","baseURL","token","tokenInterceptor","config","headers","responseBody","response","data","interceptors","request","use","error","Promise","reject","serverRequests","del","url","delete","then","get","put","body","post","Auth","login","user","loginGoogle","register","Account","getAll","account","Transaction","id","update","transaction","Budget","budget","_id","User","profile","setToken","_token"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nconst API_ROOT = \"/api\";\n\nconst server = axios.create({\n  baseURL: API_ROOT\n});\n\nlet token = null;\n\nconst tokenInterceptor = config => {\n  if (token) {\n    config.headers[\"token\"] = token;\n  }\n  return config;\n};\n\nconst responseBody = response => response.data;\n\nserver.interceptors.request.use(tokenInterceptor, error =>\n  Promise.reject(error)\n);\n\nconst serverRequests = {\n  del: url => server.delete(`${url}`).then(responseBody),\n  get: url => server.get(`${url}`).then(responseBody),\n  put: (url, body) => server.put(`${url}`, body).then(responseBody),\n  post: (url, body) => server.post(`${url}`, body).then(responseBody)\n};\n\nconst Auth = {\n  login: user => serverRequests.post(\"/login\", user),\n  loginGoogle: user => serverRequests.post(\"/login/google\", user),\n  register: user => serverRequests.post(\"/user\", user)\n};\n\nconst Account = {\n  getAll: () => serverRequests.get(\"/account\"),\n  get: account => serverRequests.get(`/account/${account}`)\n};\n\nconst Transaction = {\n  getAll: () => serverRequests.get(`/transaction`),\n  delete: id => serverRequests.del(`/transaction/${id}`),\n  get: id => serverRequests.get(`/transaction/${id}`),\n  update: transaction =>\n    serverRequests.put(`/transaction/${transaction.id}`, transaction),\n  create: transaction => serverRequests.post(\"/transaction\", transaction)\n};\n\nconst Budget = {\n  getAll: () => serverRequests.get(`/budget`),\n  delete: id => serverRequests.del(`/budget/${id}`),\n  get: id => serverRequests.get(`/budget/${id}`),\n  update: budget => serverRequests.put(`/budget/${budget._id}`, budget),\n  create: budget => serverRequests.post(\"/budget\", budget)\n};\n\nconst User = {\n  getAll: () => serverRequests.get(`/user`),\n  get: id => serverRequests.get(`/user/${id}`),\n  profile: () => serverRequests.get(\"/profile\"),\n  delete: id => serverRequests.del(`/user/${id}`),\n  update: user => serverRequests.put(\"/user\", user)\n};\n\nexport default {\n  Auth,\n  User,\n  Budget,\n  Account,\n  Transaction,\n  setToken: _token => {\n    token = _token;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}