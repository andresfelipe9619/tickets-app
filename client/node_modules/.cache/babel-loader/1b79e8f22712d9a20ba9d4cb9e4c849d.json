{"ast":null,"code":"var _jsxFileName = \"/home/andres/Desktop/www/ticketsapp/src/features/register/Register.js\";\nimport React from \"react\";\nimport { Form, Button, Message, Grid, Header, Segment } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport withSemanticUIFormik from \"../../components/hoc/FormikSUI\";\nimport * as Yup from \"yup\";\nimport { Redirect } from \"react-router-dom\"; // import { success } from \"../../services/redux/actions/alertActions\";\n\nimport { register // loginFacebookRequest,\n// loginGoogleRequest\n} from \"../../services/redux/actions/authActions\"; // Our inner form component. Will be wrapped with Formik({..})\n\nvar MyInnerForm = function MyInnerForm(props) {\n  var errors = props.errors,\n      handleChange = props.handleChange,\n      handleSubmit = props.handleSubmit,\n      registerHasFailed = props.registerHasFailed,\n      userHasRegistered = props.userHasRegistered;\n\n  if (userHasRegistered) {\n    return React.createElement(Redirect, {\n      to: {\n        pathname: \"/login\",\n        state: {\n          from: props.location\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    });\n  } else {\n    return React.createElement(Grid, {\n      style: {\n        height: \"100%\"\n      },\n      verticalAlign: \"middle\",\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 6,\n      style: {\n        paddingTop: \"2em\",\n        maxWidth: 450\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h2\",\n      color: \"black\",\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Start creating your budgets now!\"), React.createElement(Segment, {\n      stacked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, Object.keys(errors).length > 0 ? React.createElement(Message, {\n      error: true,\n      header: \"There'are some problems\",\n      list: Object.keys(errors).map(function (key) {\n        return errors[key];\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }) : registerHasFailed ? React.createElement(Message, {\n      error: true,\n      header: \"Hay problemas con el inicio de sesion\",\n      content: \"err\" in registerHasFailed ? registerHasFailed.err.message : registerHasFailed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }) : null, React.createElement(Form, {\n      size: \"large\",\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Form.Input, {\n      label: \"Full name\",\n      labelPosition: \"left\",\n      fluid: true,\n      icon: \"user\",\n      type: \"text\",\n      name: \"name\",\n      iconPosition: \"left\",\n      placeholder: \"bugs bunny\",\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      label: \"Email address\",\n      labelPosition: \"left\",\n      fluid: true,\n      icon: \"mail\",\n      type: \"email\",\n      name: \"email\",\n      iconPosition: \"left\",\n      placeholder: \"bugsbunny@money.com\",\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      label: \"password\",\n      labelPosition: \"left\",\n      type: \"password\",\n      fluid: true,\n      icon: \"lock\",\n      iconPosition: \"left\",\n      name: \"password\",\n      placeholder: \"password...\",\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      label: \"Confirm your password\",\n      labelPosition: \"left\",\n      type: \"password\",\n      fluid: true,\n      icon: \"lock\",\n      iconPosition: \"left\",\n      name: \"passwordConfirm\",\n      placeholder: \"password...\",\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(Button, {\n      id: \"submit-login\",\n      type: \"submit\",\n      style: {\n        width: \"100%\",\n        height: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Sign up\"))))));\n  }\n};\n\nvar mapState = function mapState(state) {\n  return {\n    userHasRegistered: state.authService.registerSuccess,\n    registerHasFailed: state.authService.registerFailure\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    registerRequest: function registerRequest(user) {\n      dispatch(register(user));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(withSemanticUIFormik({\n  mapPropsToValues: function mapPropsToValues() {\n    return {\n      email: \"\",\n      name: \"\",\n      password: \"\"\n    };\n  },\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email(\"Correo invalido\").required(\"Correo es requerido!\"),\n    password: Yup.string().min(6).required(\"password es requerido!\"),\n    passwordConfirm: Yup.string().oneOf([Yup.ref(\"password\"), null]).required(\"Confirmacion de contase√±a es requerido!\")\n  }),\n  handleSubmit: function handleSubmit(values, _ref) {\n    var setSubmitting = _ref.setSubmitting,\n        props = _ref.props;\n    var name = values.name,\n        email = values.email,\n        password = values.password;\n    setTimeout(function () {\n      props.registerRequest({\n        email: email,\n        password: password,\n        name: name,\n        estado: true,\n        google: false\n      });\n      setSubmitting(false);\n    }, 1000);\n  },\n  displayName: \"RegisterForm\"\n})(MyInnerForm));","map":{"version":3,"sources":["/home/andres/Desktop/www/ticketsapp/src/features/register/Register.js"],"names":["React","Form","Button","Message","Grid","Header","Segment","connect","withSemanticUIFormik","Yup","Redirect","register","MyInnerForm","props","errors","handleChange","handleSubmit","registerHasFailed","userHasRegistered","pathname","state","from","location","height","paddingTop","maxWidth","Object","keys","length","map","key","err","message","width","mapState","authService","registerSuccess","registerFailure","mapDispatch","dispatch","registerRequest","user","mapPropsToValues","email","name","password","validationSchema","object","shape","string","required","min","passwordConfirm","oneOf","ref","values","setSubmitting","setTimeout","estado","google","displayName"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Form,\n  Button,\n  Message,\n  Grid,\n  Header,\n  Segment\n} from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport withSemanticUIFormik from \"../../components/hoc/FormikSUI\";\nimport * as Yup from \"yup\";\nimport { Redirect } from \"react-router-dom\";\n// import { success } from \"../../services/redux/actions/alertActions\";\nimport {\n  register\n  // loginFacebookRequest,\n  // loginGoogleRequest\n} from \"../../services/redux/actions/authActions\";\n\n// Our inner form component. Will be wrapped with Formik({..})\nconst MyInnerForm = props => {\n  const {\n    errors,\n    handleChange,\n    handleSubmit,\n    registerHasFailed,\n    userHasRegistered\n  } = props;\n\n  if (userHasRegistered) {\n    return (\n      <Redirect\n        to={{\n          pathname: \"/login\",\n          state: {\n            from: props.location\n          }\n        }}\n      />\n    );\n  } else {\n    return (\n      <Grid\n        style={{\n          height: \"100%\"\n        }}\n        verticalAlign=\"middle\"\n        centered\n      >\n        <Grid.Row centered>\n          <Grid.Column width={6} style={{ paddingTop: \"2em\", maxWidth: 450 }}>\n            <Header as=\"h2\" color=\"black\" textAlign=\"center\">\n              Start creating your budgets now!\n            </Header>\n            <Segment stacked>\n              {Object.keys(errors).length > 0 ? (\n                <Message\n                  error\n                  header=\"There'are some problems\"\n                  list={Object.keys(errors).map(key => errors[key])}\n                />\n              ) : registerHasFailed ? (\n                <Message\n                  error\n                  header=\"Hay problemas con el inicio de sesion\"\n                  content={\n                    \"err\" in registerHasFailed\n                      ? registerHasFailed.err.message\n                      : registerHasFailed\n                  }\n                />\n              ) : null}\n              <Form size=\"large\" onSubmit={handleSubmit}>\n                <Form.Input\n                  label=\"Full name\"\n                  labelPosition=\"left\"\n                  fluid\n                  icon=\"user\"\n                  type=\"text\"\n                  name=\"name\"\n                  iconPosition=\"left\"\n                  placeholder=\"bugs bunny\"\n                  onChange={handleChange}\n                />\n                <Form.Input\n                  label=\"Email address\"\n                  labelPosition=\"left\"\n                  fluid\n                  icon=\"mail\"\n                  type=\"email\"\n                  name=\"email\"\n                  iconPosition=\"left\"\n                  placeholder=\"bugsbunny@money.com\"\n                  onChange={handleChange}\n                />\n                <Form.Input\n                  label=\"password\"\n                  labelPosition=\"left\"\n                  type=\"password\"\n                  fluid\n                  icon=\"lock\"\n                  iconPosition=\"left\"\n                  name=\"password\"\n                  placeholder=\"password...\"\n                  onChange={handleChange}\n                />\n                <Form.Input\n                  label=\"Confirm your password\"\n                  labelPosition=\"left\"\n                  type=\"password\"\n                  fluid\n                  icon=\"lock\"\n                  iconPosition=\"left\"\n                  name=\"passwordConfirm\"\n                  placeholder=\"password...\"\n                  onChange={handleChange}\n                />\n                <Button\n                  id=\"submit-login\"\n                  type=\"submit\"\n                  style={{ width: \"100%\", height: \"auto\" }}\n                >\n                  Sign up\n                </Button>\n              </Form>\n            </Segment>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n};\n\nconst mapState = state => {\n  return {\n    userHasRegistered: state.authService.registerSuccess,\n    registerHasFailed: state.authService.registerFailure\n  };\n};\n\nconst mapDispatch = dispatch => {\n  return {\n    registerRequest: user => {\n      dispatch(register(user));\n    }\n  };\n};\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(\n  withSemanticUIFormik({\n    mapPropsToValues: () => ({ email: \"\", name: \"\", password: \"\" }),\n    validationSchema: Yup.object().shape({\n      email: Yup.string()\n        .email(\"Correo invalido\")\n        .required(\"Correo es requerido!\"),\n      password: Yup.string()\n        .min(6)\n        .required(\"password es requerido!\"),\n      passwordConfirm: Yup.string()\n        .oneOf([Yup.ref(\"password\"), null])\n        .required(\"Confirmacion de contase√±a es requerido!\")\n    }),\n    handleSubmit: (values, { setSubmitting, props }) => {\n      let { name, email, password } = values;\n      setTimeout(() => {\n        props.registerRequest({\n          email,\n          password,\n          name,\n          estado: true,\n          google: false\n        });\n        setSubmitting(false);\n      }, 1000);\n    },\n    displayName: \"RegisterForm\"\n  })(MyInnerForm)\n);\n"]},"metadata":{},"sourceType":"module"}