{"ast":null,"code":"import _objectSpread from \"/home/andres/Desktop/www/ticketsapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/home/andres/Desktop/www/ticketsapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/andres/Desktop/www/ticketsapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/andres/Desktop/www/ticketsapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/andres/Desktop/www/ticketsapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/andres/Desktop/www/ticketsapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/andres/Desktop/www/ticketsapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/andres/Desktop/www/ticketsapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/andres/Desktop/www/ticketsapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/andres/Desktop/www/ticketsapp/src/features/profile/Profile.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { logout } from \"../../services/redux/actions/authActions\";\nimport { Divider, Message, Segment, Modal } from \"semantic-ui-react\";\nimport { SettingsPane, SettingsPage, SettingsContent, SettingsMenu } from \"react-settings-pane\";\nimport \"./styles/styles.css\";\nimport \"./styles/bootstrap.min.css\";\nimport API from \"../../services/api\";\nimport { createBrowserHistory } from \"history\";\nvar history = createBrowserHistory();\n\nvar back = function back() {\n  history.goBack();\n};\n\nexport var Profile =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Profile, _Component);\n\n  function Profile(props) {\n    var _this;\n\n    _classCallCheck(this, Profile);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Profile).call(this, props));\n\n    _this.openModal = function () {\n      _this.setState({\n        modalIsOpen: true\n      });\n    };\n\n    _this.closeModal = function () {\n      _this.setState({\n        modalIsOpen: false\n      }); //back to last page after closing modal\n\n\n      back();\n    };\n\n    _this.deleteAccount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var userID;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!_this.props.userHasLoggedin) {\n                _context.next = 5;\n                break;\n              }\n\n              userID = _this.props.userHasLoggedin._id;\n              _context.next = 4;\n              return API.User.delete(userID);\n\n            case 4:\n              _this.props.logoutRequest(_this.props.userHasLoggedin);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.closeModal = _this.closeModal.bind(_assertThisInitialized(_assertThisInitialized(_this))); // You will maybe receive your settings from this.props or do a fetch request in your componentWillMount\n\n    _this.state = {\n      modalIsOpen: false,\n      //Example of how fetch data should look\n      generalName: _this.props.userHasLoggedin.name,\n      generalEmail: _this.props.userHasLoggedin.email,\n      generalPicture: _this.props.userHasLoggedin.img\n    }; // Save settings after close\n\n    _this._leavePaneHandler =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(wasSaved, newSettings, oldSettings) {\n        var userId, res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                userId = _this.props.userHasLoggedin._id; // \"wasSaved\" indicates wheather the pane was just closed or the save button was clicked.\n\n                if (!(wasSaved && newSettings !== oldSettings)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                // do something with the settings, e.g. save via ajax.\n                _this.setState(newSettings);\n\n                _context2.next = 5;\n                return API.User.update(_objectSpread({\n                  userId: userId\n                }, newSettings));\n\n              case 5:\n                res = _context2.sent;\n\n                if (res.ok) {\n                  console.log(\"success saving new settings\");\n                }\n\n                console.log(\"update user profile\");\n\n              case 8:\n                _this.closeModal();\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }(); // React if a single setting changed\n\n\n    _this._settingsChanged = function (ev) {}; // Define your menu\n\n\n    _this._menu = [{\n      title: \"General\",\n      // Title that is displayed as text in the menu\n      url: \"/settings/general\" // Identifier (url-slug)\n\n    }, // {\n    //   title: \"Profile\",\n    //   url: \"/settings/profile\"\n    // },\n    {\n      title: \"Account\",\n      url: \"/settings/account\"\n    }, {\n      title: \"About Us\",\n      url: \"/settings/about\"\n    }];\n    return _this;\n  }\n\n  _createClass(Profile, [{\n    key: \"render\",\n    value: function render() {\n      // Get settings\n      var settings = this.state; // Return your Settings Pane\n\n      return React.createElement(Modal, {\n        open: this.state.modalIsOpen,\n        onOpen: this.openModal,\n        onClose: this.closeModal,\n        closeIcon: true,\n        closeOnDocumentClick: true,\n        centered: true,\n        style: {\n          display: \"block\",\n          marginTop: \"auto\",\n          marginBottom: \"auto\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          height: \"569px\"\n        },\n        dimmer: \"blurring\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(SettingsPane, {\n        items: this._menu,\n        index: \"/settings/general\",\n        settings: settings,\n        onChange: this._settingsChanged,\n        onPaneLeave: this._leavePaneHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(SettingsMenu, {\n        headline: \"Settings\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(SettingsContent, {\n        header: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(SettingsPage, {\n        handler: \"/settings/general\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"profile-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: settings[\"generalPicture\"],\n        alt: \"profilePicture\",\n        width: \"100\",\n        height: \"100\",\n        style: {\n          display: \"block\",\n          borderRadius: \"50%\",\n          marginRight: \"auto\",\n          marginLeft: \"auto\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })), React.createElement(\"fieldset\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"generalName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Name: \"), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        name: \"mysettings.general.name\",\n        placeholder: \"Name\",\n        id: \"generalName\",\n        onChange: this._settingsChanged,\n        defaultValue: settings[\"generalName\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      })), React.createElement(\"fieldset\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"generalMail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"E-Mail address: \"), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        name: \"mysettings.general.email\",\n        placeholder: \"E-Mail Address\",\n        id: \"generalMail\",\n        onChange: this._settingsChanged,\n        defaultValue: settings[\"generalEmail\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })), React.createElement(\"fieldset\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"changeAccountPassword\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"Change password: \"), React.createElement(\"input\", {\n        type: \"password\",\n        className: \"form-control\",\n        name: \"mysettings.general.email\",\n        placeholder: \"Enter Password\",\n        id: \"generalMail\",\n        onChange: this._settingsChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      })), React.createElement(\"fieldset\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"verifyChangePassword\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Verify Password: \"), React.createElement(\"input\", {\n        type: \"password\",\n        className: \"form-control\",\n        name: \"mysettings.general.email\",\n        placeholder: \"Verify Password\",\n        id: \"generalMail\",\n        onChange: this._settingsChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }))), React.createElement(SettingsPage, {\n        handler: \"/settings/account\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, React.createElement(Message, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(Message.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, \"About Deleting your Account\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, \"This section is critical. Here you can delete your account, which means deleting all your account information and settings. \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, \"THIS CAN'T BE UNDONE\"))), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        id: \"deleteAccountBtn\",\n        className: \"btn btn-danger\",\n        onClick: this.deleteAccount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, \"Delete Account\")))), React.createElement(SettingsPage, {\n        handler: \"/settings/about\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, React.createElement(Segment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, \"We are a group of Systems Engineer students from Universidad del Valle, Cali, Colombia. This application is part of a project for the Software Development class 2018-2.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }), \"Feel free to check our GitHub Repo\", \" \", React.createElement(\"a\", {\n        href: \"https://github.com/andresfelipe9619/bugs-money\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, \"here\"))))))));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.openModal();\n    }\n  }]);\n\n  return Profile;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userHasLoggedin: state.authService.loginSuccess\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    logoutRequest: function logoutRequest(user) {\n      user ? dispatch(logout(user)) : console.log(\"No user to logout\");\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);","map":{"version":3,"sources":["/home/andres/Desktop/www/ticketsapp/src/features/profile/Profile.js"],"names":["React","Component","connect","logout","Divider","Message","Segment","Modal","SettingsPane","SettingsPage","SettingsContent","SettingsMenu","API","createBrowserHistory","history","back","goBack","Profile","props","openModal","setState","modalIsOpen","closeModal","deleteAccount","userHasLoggedin","userID","_id","User","delete","logoutRequest","bind","state","generalName","name","generalEmail","email","generalPicture","img","_leavePaneHandler","wasSaved","newSettings","oldSettings","userId","update","res","ok","console","log","_settingsChanged","ev","_menu","title","url","settings","display","marginTop","marginBottom","marginLeft","marginRight","height","borderRadius","mapStateToProps","authService","loginSuccess","mapDispatchToProps","dispatch","user"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { logout } from \"../../services/redux/actions/authActions\";\n\nimport { Divider, Message, Segment, Modal } from \"semantic-ui-react\";\nimport {\n  SettingsPane,\n  SettingsPage,\n  SettingsContent,\n  SettingsMenu\n} from \"react-settings-pane\";\nimport \"./styles/styles.css\";\nimport \"./styles/bootstrap.min.css\";\nimport API from \"../../services/api\";\n\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nconst back = () => {\n  history.goBack();\n};\n\nexport class Profile extends Component {\n  constructor(props) {\n    super(props);\n    this.closeModal = this.closeModal.bind(this);\n\n    // You will maybe receive your settings from this.props or do a fetch request in your componentWillMount\n    this.state = {\n      modalIsOpen: false,\n      //Example of how fetch data should look\n      generalName: this.props.userHasLoggedin.name,\n      generalEmail: this.props.userHasLoggedin.email,\n      generalPicture: this.props.userHasLoggedin.img\n    };\n\n    // Save settings after close\n    this._leavePaneHandler = async (wasSaved, newSettings, oldSettings) => {\n      let userId = this.props.userHasLoggedin._id;\n      // \"wasSaved\" indicates wheather the pane was just closed or the save button was clicked.\n      if (wasSaved && newSettings !== oldSettings) {\n        // do something with the settings, e.g. save via ajax.\n\n        this.setState(newSettings);\n        let res = await API.User.update({ userId, ...newSettings });\n        if (res.ok) {\n          console.log(\"success saving new settings\");\n        }\n\n        console.log(\"update user profile\");\n      }\n      this.closeModal();\n    };\n\n    // React if a single setting changed\n    this._settingsChanged = ev => {};\n\n    // Define your menu\n    this._menu = [\n      {\n        title: \"General\", // Title that is displayed as text in the menu\n        url: \"/settings/general\" // Identifier (url-slug)\n      },\n      // {\n      //   title: \"Profile\",\n      //   url: \"/settings/profile\"\n      // },\n      {\n        title: \"Account\",\n        url: \"/settings/account\"\n      },\n      {\n        title: \"About Us\",\n        url: \"/settings/about\"\n      }\n    ];\n  }\n\n  openModal = () => {\n    this.setState({ modalIsOpen: true });\n  };\n\n  closeModal = () => {\n    this.setState({ modalIsOpen: false });\n    //back to last page after closing modal\n    back();\n  };\n\n  //Delete user account\n\n  deleteAccount = async () => {\n    if (this.props.userHasLoggedin) {\n      let userID = this.props.userHasLoggedin._id;\n      await API.User.delete(userID);\n      this.props.logoutRequest(this.props.userHasLoggedin);\n    }\n  };\n\n  render() {\n    // Get settings\n    let settings = this.state;\n\n    // Return your Settings Pane\n    return (\n      <Modal\n        open={this.state.modalIsOpen}\n        onOpen={this.openModal}\n        onClose={this.closeModal}\n        closeIcon\n        closeOnDocumentClick\n        centered\n        style={{\n          display: \"block\",\n          marginTop: \"auto\",\n          marginBottom: \"auto\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          height: \"569px\"\n        }}\n        dimmer={\"blurring\"}\n      >\n        <SettingsPane\n          items={this._menu}\n          index=\"/settings/general\"\n          settings={settings}\n          onChange={this._settingsChanged}\n          onPaneLeave={this._leavePaneHandler}\n        >\n          <SettingsMenu headline=\"Settings\" />\n          <SettingsContent header>\n            <SettingsPage handler=\"/settings/general\">\n              <div className=\"profile-image\">\n                <img\n                  src={settings[\"generalPicture\"]}\n                  alt=\"profilePicture\"\n                  width=\"100\"\n                  height=\"100\"\n                  style={{\n                    display: \"block\",\n                    borderRadius: \"50%\",\n                    marginRight: \"auto\",\n                    marginLeft: \"auto\"\n                  }}\n                />\n              </div>\n\n              <fieldset className=\"form-group\">\n                <label htmlFor=\"generalName\">Name: </label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"mysettings.general.name\"\n                  placeholder=\"Name\"\n                  id=\"generalName\"\n                  onChange={this._settingsChanged}\n                  defaultValue={settings[\"generalName\"]}\n                />\n              </fieldset>\n              <fieldset className=\"form-group\">\n                <label htmlFor=\"generalMail\">E-Mail address: </label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"mysettings.general.email\"\n                  placeholder=\"E-Mail Address\"\n                  id=\"generalMail\"\n                  onChange={this._settingsChanged}\n                  defaultValue={settings[\"generalEmail\"]}\n                />\n              </fieldset>\n              <fieldset className=\"form-group\">\n                <label htmlFor=\"changeAccountPassword\">Change password: </label>\n                <input\n                  type=\"password\"\n                  className=\"form-control\"\n                  name=\"mysettings.general.email\"\n                  placeholder=\"Enter Password\"\n                  id=\"generalMail\"\n                  onChange={this._settingsChanged}\n                />\n              </fieldset>\n              <fieldset className=\"form-group\">\n                <label htmlFor=\"verifyChangePassword\">Verify Password: </label>\n                <input\n                  type=\"password\"\n                  className=\"form-control\"\n                  name=\"mysettings.general.email\"\n                  placeholder=\"Verify Password\"\n                  id=\"generalMail\"\n                  onChange={this._settingsChanged}\n                />\n              </fieldset>\n              {/* <fieldset className=\"form-group\">\n                <label htmlFor=\"generalPic\">Picture: </label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"mysettings.general.picture\"\n                  placeholder=\"Picture\"\n                  id=\"generalPic\"\n                  onChange={this._settingsChanged}\n                  defaultValue={settings[\"mysettings.general.picture\"]}\n                />\n              </fieldset> */}\n            </SettingsPage>\n\n            {/* <SettingsPage handler=\"/settings/profile\">\n              <fieldset className=\"form-group\">\n                <label htmlFor=\"profileFirstname\">Firstname: </label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"mysettings.profile.firstname\"\n                  placeholder=\"Firstname\"\n                  id=\"profileFirstname\"\n                  onChange={this._settingsChanged}\n                  defaultValue={settings[\"mysettings.profile.firstname\"]}\n                />\n              </fieldset>\n              <fieldset className=\"form-group\">\n                <label htmlFor=\"profileLastname\">Lastname: </label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"mysettings.profile.lastname\"\n                  placeholder=\"Lastname\"\n                  id=\"profileLastname\"\n                  onChange={this._settingsChanged}\n                  defaultValue={settings[\"mysettings.profile.lastname\"]}\n                />\n              </fieldset>\n              <fieldset className=\"form-group\">\n                <label htmlFor=\"profileUsername\">Username: </label>\n                <div className=\"input-group\">\n                  <span className=\"input-group-addon\" id=\"basic-addon1\">\n                    @\n                  </span>\n                  <input\n                    type=\"text\"\n                    name=\"mysettings.profile.username\"\n                    className=\"form-control\"\n                    placeholder=\"Username\"\n                    aria-describedby=\"basic-addon1\"\n                    onChange={this._settingsChanged}\n                    defaultValue={settings[\"mysettings.profile.username\"]}\n                  />\n                </div>\n              </fieldset>\n              <fieldset className=\"form-group\">\n                <label htmlFor=\"profileBiography\">Biography: </label>\n                <textarea\n                  className=\"form-control\"\n                  name=\"mysettings.profile.biography\"\n                  placeholder=\"Biography\"\n                  id=\"profileBiography\"\n                  onChange={this._settingsChanged}\n                  defaultValue={settings[\"mysettings.profile.biography\"]}\n                />\n              </fieldset>\n            </SettingsPage> */}\n            <SettingsPage handler=\"/settings/account\">\n              <div>\n                <Message>\n                  <Message.Header>About Deleting your Account</Message.Header>\n                  <p>\n                    This section is critical. Here you can delete your account,\n                    which means deleting all your account information and\n                    settings. <strong>THIS CAN'T BE UNDONE</strong>\n                  </p>\n                </Message>\n                <Divider />\n                <button\n                  id=\"deleteAccountBtn\"\n                  className=\"btn btn-danger\"\n                  onClick={this.deleteAccount}\n                >\n                  <strong>Delete Account</strong>\n                </button>\n              </div>\n            </SettingsPage>\n            <SettingsPage handler=\"/settings/about\">\n              <div>\n                <Segment>\n                  <p>\n                    We are a group of Systems Engineer students from Universidad\n                    del Valle, Cali, Colombia. This application is part of a\n                    project for the Software Development class 2018-2.\n                    <br />\n                    Feel free to check our GitHub Repo{\" \"}\n                    <a\n                      href=\"https://github.com/andresfelipe9619/bugs-money\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      here\n                    </a>\n                  </p>\n                </Segment>\n              </div>\n            </SettingsPage>\n          </SettingsContent>\n        </SettingsPane>\n      </Modal>\n    );\n  }\n\n  componentDidMount() {\n    this.openModal();\n  }\n}\n\nconst mapStateToProps = state => ({\n  userHasLoggedin: state.authService.loginSuccess\n});\n\nconst mapDispatchToProps = dispatch => ({\n  logoutRequest: user => {\n    user ? dispatch(logout(user)) : console.log(\"No user to logout\");\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Profile);\n"]},"metadata":{},"sourceType":"module"}