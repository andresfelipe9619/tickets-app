{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SettingsPane = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _formSerialize = require('form-serialize');\n\nvar _formSerialize2 = _interopRequireDefault(_formSerialize);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * @react-settings-pane\n *\n * @copyright Dennis StÃ¼cken\n * @licence MIT\n */\n\n\nvar SettingsPane = exports.SettingsPane = function (_Component) {\n  _inherits(SettingsPane, _Component);\n  /**\n   * Construct.\n   *\n   * @param props\n   */\n\n\n  function SettingsPane(props) {\n    _classCallCheck(this, SettingsPane);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SettingsPane).call(this, props));\n\n    _this.state = {\n      currentPage: props.index,\n      items: props.items,\n      settings: props.settings\n    };\n    _this._handleSubmit = _this.handleSubmit.bind(_this);\n    return _this;\n  }\n  /**\n   * Adds an event listener\n   *\n   * @param node\n   * @param event\n   * @param handler\n   * @returns {{remove: (function())}}\n   */\n\n  /**\n   * PropTypes\n   *\n   * @type {{children: *, settings: *, index: *, onChange: *, onPaneLeave: *, onMenuItemClick: *}}\n   */\n\n\n  _createClass(SettingsPane, [{\n    key: 'addEvent',\n    value: function addEvent(node, event, handler) {\n      node.addEventListener(event, handler);\n      return {\n        remove: function remove() {\n          node.removeEventListener(event, handler);\n        }\n      };\n    }\n    /**\n     * Handle keyup and close pane if esc key was pressed\n     *\n     * @param ev\n     */\n\n  }, {\n    key: 'handleKeyUp',\n    value: function handleKeyUp(ev) {\n      if (ev.keyCode === 27) {\n        this.props.onPaneLeave(false, this.state.settings, this.state.settings);\n\n        this._keyUpListener.remove();\n      }\n    }\n    /**\n     * Component was loaded\n     */\n\n  }, {\n    key: 'load',\n    value: function load() {\n      this._keyUpListener = this.addEvent(document, 'keyup', this.handleKeyUp.bind(this));\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.load();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.load();\n    }\n    /**\n     * Switch content to another menuitem\n     *\n     * @param menuItem\n     */\n\n  }, {\n    key: 'switchContent',\n    value: function switchContent(menuItem) {\n      // Check if currentPage is different than the new urls\n      if (this.state.currentPage !== menuItem.url) {\n        // Switch to menuItem's url and reload the components\n        this.setState(Object.assign({}, this.state, {\n          currentPage: menuItem.url\n        }));\n      }\n    }\n    /**\n     * Settings changed\n     *\n     * @param ev\n     */\n\n  }, {\n    key: 'settingsChanged',\n    value: function settingsChanged(ev) {\n      // Propagate onChange event\n      if (this.props.onChange) {\n        this.props.onChange(ev);\n      }\n    }\n    /**\n     * Handle Formsubmit\n     *\n     * @param ev\n     */\n\n  }, {\n    key: 'handleSubmit',\n    value: function handleSubmit(ev) {\n      ev.preventDefault();\n\n      if (this.form) {\n        // Retrieve settings via form serialization\n        // todo: Create custom form Components and retrieve form data from these components instead of serializing..\n        var newSettings = Object.assign({}, this.props.settings, (0, _formSerialize2.default)(this.form, {\n          hash: true\n        })); // Update state with new settings\n\n        if (JSON.stringify(newSettings) !== JSON.stringify(this.props.settings)) {\n          this.setState(Object.assign(this.state, {\n            settings: newSettings\n          })); // Propagate onPaneLeave\n\n          this.props.onPaneLeave(true, newSettings, this.props.settings);\n        } else {\n          // Propagate onPaneLeave\n          this.props.onPaneLeave(true, this.props.settings, this.props.settings);\n        }\n      } else {//console.error('Unknown error: Form reference to this.form invalid.')\n      }\n    }\n    /**\n     * Render this component\n     *\n     * @returns {XML}\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _state = this.state;\n      var items = _state.items;\n      var settings = _state.settings;\n      var currentPage = _state.currentPage; // Pass some props to all SettingsPane Children (usualy there are two childs: SettingsMenu and SettingsContent)\n\n      var childrenWithProps = _react.Children.map(this.props.children, function (child) {\n        return _react2.default.cloneElement(child, {\n          items: items,\n          settings: settings,\n          currentPage: currentPage,\n          onPaneLeave: _this2.props.onPaneLeave,\n          onMenuItemClick: _this2.props.onMenuItemClick,\n          switchContent: _this2.switchContent.bind(_this2),\n          onChange: _this2.settingsChanged\n        });\n      }); // Return JSX\n\n\n      return _react2.default.createElement('div', {\n        className: 'settings-pane'\n      }, _react2.default.createElement('form', {\n        ref: function ref(_ref) {\n          return _this2.form = _ref;\n        },\n        className: 'settings',\n        onSubmit: this._handleSubmit\n      }, childrenWithProps));\n    }\n  }]);\n\n  return SettingsPane;\n}(_react.Component);\n\nSettingsPane.propTypes = {\n  children: _react.PropTypes.node.isRequired,\n  settings: _react.PropTypes.object.isRequired,\n  items: _react.PropTypes.array.isRequired,\n  index: _react.PropTypes.string.isRequired,\n  onChange: _react.PropTypes.func,\n  onPaneLeave: _react.PropTypes.func,\n  onMenuItemClick: _react.PropTypes.func,\n  closeButtonClass: _react.PropTypes.string,\n  saveButtonClass: _react.PropTypes.string\n};\nexports.default = SettingsPane;","map":null,"metadata":{},"sourceType":"script"}